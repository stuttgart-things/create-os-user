---
- name: Allow admin group sudo without password
  lineinfile:
    path: /etc/sudoers
    state: present
    regexp: '^%admin ALL='
    line: '%admin ALL=(ALL) NOPASSWD: ALL'
    validate: '/usr/sbin/visudo -cf %s'
  tags: ["users", "groups", "configuration"]
  when: ansible_os_family == 'Debian'

- name: Allow sudo group sudo without password
  lineinfile:
    path: /etc/sudoers
    state: present
    regexp: '^%sudo   ALL='
    line: '%sudo   ALL=(ALL:ALL) NOPASSWD: ALL'
    validate: '/usr/sbin/visudo -cf %s'
  tags: ["users", "groups", "configuration"]
  when: ansible_os_family == 'Debian'

- name: Allow user sudo without password
  lineinfile:
    path: /etc/sudoers
    line: '{{ item.username }} ALL=NOPASSWD: ALL'
    create: yes
    validate: '/usr/sbin/visudo -cf %s'
  with_items: "{{ users }}"
  when: ansible_os_family == 'Debian' and '"sudo" in users.groups'

- name: sudo without password for wheel group
  copy:
    content: '%wheel ALL=(ALL:ALL) NOPASSWD:ALL'
    dest: /etc/sudoers.d/wheel_nopasswd
    mode: 0440
  when: ansible_os_family == 'RedHat'

- name: User creation
  user:
    name: "{{ item.username }}"
    group: "{{ item.group | default(item.username if users_create_per_user_group else users_group) }}"
    # empty string removes user from all secondary groups
    groups: "{{ item.groups | join(',') if 'groups' in item else '' }}"
    append: "{{ item.append | default(omit) }}"
    shell: "{{ item.shell if item.shell is defined else users_default_shell }}"
    password: "{{ item.password if item.password is defined else '!' }}"
    comment: "{{ item.name if item.name is defined else '' }}"
    uid: "{{ item.uid | default(omit) }}"
    home: "{{ item.home | default('/home/' + item.username)  }}"
    createhome: "{{ 'yes' if users_create_homedirs else 'no' }}"
    generate_ssh_key: "{{ item.generate_ssh_key | default(omit)  }}"
    update_password: "{{ item.update_password | default(omit) }}"
    system: "{{ item.is_system_user | default(omit) | bool or omit }}"
  with_items: "{{ users }}"
  tags: ["users", "configuration"]

- name: SSH keys
  authorized_key:
    user: "{{ item.0.username }}"
    key: "{{ item.1 }}"
    path: "{{ item.0.home | default('/home/' + item.0.username)  }}/.ssh/authorized_keys"
  with_subelements:
    - "{{ users }}"
    - ssh_key
    - skip_missing: yes
  tags: ["users", "configuration"]

- name: Setup user profiles
  blockinfile:
    block: "{{ item.profile }}"
    dest: "{{ item.home | default('/home/' + item.username) }}/.profile"
    owner: "{{ item.username }}"
    group: "{{ item.group | default(item.username if users_create_per_user_group else users_group) }}"
    mode: 0644
    create: true
  when: users_create_homedirs and item.profile is defined
  with_items: "{{ users }}"

- name: Deleted user removal
  user:
    name: "{{ item.username }}"
    state: absent
    remove: "{{ item.remove | default(omit) }}"
    force: "{{ item.force | default(omit) }}"
  with_items: "{{ users_deleted }}"
  tags: ["users", "configuration"]

- name: Deleted per-user group removal
  group: name="{{ item.username }}" state=absent
  with_items: "{{ users_deleted }}"
  when: users_create_per_user_group
  tags: ["users", "configuration"]
  
- name: Enable SSH TCP Forwarding
  lineinfile:
    path: "{{ item.home | default('/home/' + item.username) }}/.ssh/config"
    line:  "AllowTcpForwarding yes"
    regexp: '^#AllowTcpForwarding yes$'
    create: yes
  when: item.enable_ssh_tcp_forwarding is defined and item.enable_ssh_tcp_forwarding|bool == True
  with_items: "{{ users }}"  
